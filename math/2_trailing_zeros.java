/*
Write an algorithm which computes the number of trailing zeros in n factorial.

Example
    11! = 39916800, so the out should be 2

Challenge 
    O(log N) time
*/

/*
Thought process:
    Cannot directly calculate factorial because there will be big integer overflow.
    Observe that trailing zero is generated by product of 2 and 5, and there are always 
    more (or at least equal) number of 2s than 5s as factors. So we only need to count
    the number of 5s by n / 5. 
    But the result n/5 may also has factor 5 because there are numbers like 25, 125 that 
    have more than one 5 as factors. So keep dividing 5 until n equals 0, and count the number of 5s.
*/

class Solution {
    public long trailingZeros(long n) {
        long count = 0;
        while(n != 0) {
            n = n / 5;
            count += n;
        }
        return count;
    }
}
